//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class DependencyInstancesClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    dependencyInstances_Search(query: SearchDependencyInstancesWithPaginationQuery): Observable<PaginatedListOfDependencyInstanceVm> {
        let url_ = this.baseUrl + "/api/DependencyInstances/Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDependencyInstances_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDependencyInstances_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PaginatedListOfDependencyInstanceVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PaginatedListOfDependencyInstanceVm>;
        }));
    }

    protected processDependencyInstances_Search(response: HttpResponseBase): Observable<PaginatedListOfDependencyInstanceVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginatedListOfDependencyInstanceVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class ProjectsClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    projects_List(query: ListProjectsQuery | undefined): Observable<ProjectsVm> {
        let url_ = this.baseUrl + "/api/Projects?";
        if (query === null)
            throw new Error("The parameter 'query' cannot be null.");
        else if (query !== undefined)
            url_ += "query=" + encodeURIComponent("" + query) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processProjects_List(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processProjects_List(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ProjectsVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ProjectsVm>;
        }));
    }

    protected processProjects_List(response: HttpResponseBase): Observable<ProjectsVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProjectsVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    projects_GetByRepositoryIds(repositoryIds: number[] | undefined): Observable<ProjectsVm> {
        let url_ = this.baseUrl + "/api/Projects/GetByRepositoryIds?";
        if (repositoryIds === null)
            throw new Error("The parameter 'repositoryIds' cannot be null.");
        else if (repositoryIds !== undefined)
            repositoryIds && repositoryIds.forEach(item => { url_ += "RepositoryIds=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processProjects_GetByRepositoryIds(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processProjects_GetByRepositoryIds(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ProjectsVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ProjectsVm>;
        }));
    }

    protected processProjects_GetByRepositoryIds(response: HttpResponseBase): Observable<ProjectsVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProjectsVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    projects_GetByDependency(dependencyName: string | undefined, version: string | null | undefined): Observable<ProjectsVm> {
        let url_ = this.baseUrl + "/api/Projects/GetByDependency?";
        if (dependencyName === null)
            throw new Error("The parameter 'dependencyName' cannot be null.");
        else if (dependencyName !== undefined)
            url_ += "DependencyName=" + encodeURIComponent("" + dependencyName) + "&";
        if (version !== undefined && version !== null)
            url_ += "Version=" + encodeURIComponent("" + version) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processProjects_GetByDependency(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processProjects_GetByDependency(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ProjectsVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ProjectsVm>;
        }));
    }

    protected processProjects_GetByDependency(response: HttpResponseBase): Observable<ProjectsVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProjectsVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class RepositoriesClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    repositories_GetById(id: number): Observable<RepositorySummaryVm> {
        let url_ = this.baseUrl + "/api/Repositories/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRepositories_GetById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRepositories_GetById(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<RepositorySummaryVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<RepositorySummaryVm>;
        }));
    }

    protected processRepositories_GetById(response: HttpResponseBase): Observable<RepositorySummaryVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RepositorySummaryVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    repositories_List(query: ListRepositoriesQuery | undefined): Observable<RepositorySummariesVm> {
        let url_ = this.baseUrl + "/api/Repositories?";
        if (query === null)
            throw new Error("The parameter 'query' cannot be null.");
        else if (query !== undefined)
            url_ += "query=" + encodeURIComponent("" + query) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRepositories_List(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRepositories_List(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<RepositorySummariesVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<RepositorySummariesVm>;
        }));
    }

    protected processRepositories_List(response: HttpResponseBase): Observable<RepositorySummariesVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RepositorySummariesVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    repositories_GetBySourceId(sourceId: number | null | undefined): Observable<RepositorySummariesVm> {
        let url_ = this.baseUrl + "/api/Repositories/GetBySourceId?";
        if (sourceId !== undefined && sourceId !== null)
            url_ += "SourceId=" + encodeURIComponent("" + sourceId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRepositories_GetBySourceId(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRepositories_GetBySourceId(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<RepositorySummariesVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<RepositorySummariesVm>;
        }));
    }

    protected processRepositories_GetBySourceId(response: HttpResponseBase): Observable<RepositorySummariesVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RepositorySummariesVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class SourcesClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    sources_List(query: ListSourcesQuery | undefined): Observable<SourcesVm> {
        let url_ = this.baseUrl + "/api/Sources?";
        if (query === null)
            throw new Error("The parameter 'query' cannot be null.");
        else if (query !== undefined)
            url_ += "query=" + encodeURIComponent("" + query) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSources_List(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSources_List(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SourcesVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SourcesVm>;
        }));
    }

    protected processSources_List(response: HttpResponseBase): Observable<SourcesVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SourcesVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export class PaginatedListOfDependencyInstanceVm implements IPaginatedListOfDependencyInstanceVm {
    items?: DependencyInstanceVm[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;

    constructor(data?: IPaginatedListOfDependencyInstanceVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(DependencyInstanceVm.fromJS(item));
            }
            this.pageNumber = _data["pageNumber"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
        }
    }

    static fromJS(data: any): PaginatedListOfDependencyInstanceVm {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedListOfDependencyInstanceVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageNumber"] = this.pageNumber;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        return data;
    }
}

export interface IPaginatedListOfDependencyInstanceVm {
    items?: DependencyInstanceVm[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
}

export class DependencyInstanceVm implements IDependencyInstanceVm {
    id?: number;
    source?: string;
    name?: string;
    version?: string;
    projectName?: string;
    repositoryName?: string;

    constructor(data?: IDependencyInstanceVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.source = _data["source"];
            this.name = _data["name"];
            this.version = _data["version"];
            this.projectName = _data["projectName"];
            this.repositoryName = _data["repositoryName"];
        }
    }

    static fromJS(data: any): DependencyInstanceVm {
        data = typeof data === 'object' ? data : {};
        let result = new DependencyInstanceVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["source"] = this.source;
        data["name"] = this.name;
        data["version"] = this.version;
        data["projectName"] = this.projectName;
        data["repositoryName"] = this.repositoryName;
        return data;
    }
}

export interface IDependencyInstanceVm {
    id?: number;
    source?: string;
    name?: string;
    version?: string;
    projectName?: string;
    repositoryName?: string;
}

export abstract class PaginatedRequestOfDependencyInstanceVm implements IPaginatedRequestOfDependencyInstanceVm {
    pageNumber?: number;
    pageSize?: number;
    sortField?: string;
    sortOrder?: SortOrder;
    filters?: { [key: string]: PaginatedFilter[]; } | undefined;

    constructor(data?: IPaginatedRequestOfDependencyInstanceVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageNumber = _data["pageNumber"];
            this.pageSize = _data["pageSize"];
            this.sortField = _data["sortField"];
            this.sortOrder = _data["sortOrder"];
            if (_data["filters"]) {
                this.filters = {} as any;
                for (let key in _data["filters"]) {
                    if (_data["filters"].hasOwnProperty(key))
                        (<any>this.filters)![key] = _data["filters"][key] ? _data["filters"][key].map((i: any) => PaginatedFilter.fromJS(i)) : [];
                }
            }
        }
    }

    static fromJS(data: any): PaginatedRequestOfDependencyInstanceVm {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'PaginatedRequestOfDependencyInstanceVm' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageNumber"] = this.pageNumber;
        data["pageSize"] = this.pageSize;
        data["sortField"] = this.sortField;
        data["sortOrder"] = this.sortOrder;
        if (this.filters) {
            data["filters"] = {};
            for (let key in this.filters) {
                if (this.filters.hasOwnProperty(key))
                    (<any>data["filters"])[key] = (<any>this.filters)[key];
            }
        }
        return data;
    }
}

export interface IPaginatedRequestOfDependencyInstanceVm {
    pageNumber?: number;
    pageSize?: number;
    sortField?: string;
    sortOrder?: SortOrder;
    filters?: { [key: string]: PaginatedFilter[]; } | undefined;
}

export class SearchDependencyInstancesWithPaginationQuery extends PaginatedRequestOfDependencyInstanceVm implements ISearchDependencyInstancesWithPaginationQuery {
    sourceIds?: number[] | undefined;
    repositoryIds?: number[] | undefined;
    projectIds?: number[] | undefined;

    constructor(data?: ISearchDependencyInstancesWithPaginationQuery) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["sourceIds"])) {
                this.sourceIds = [] as any;
                for (let item of _data["sourceIds"])
                    this.sourceIds!.push(item);
            }
            if (Array.isArray(_data["repositoryIds"])) {
                this.repositoryIds = [] as any;
                for (let item of _data["repositoryIds"])
                    this.repositoryIds!.push(item);
            }
            if (Array.isArray(_data["projectIds"])) {
                this.projectIds = [] as any;
                for (let item of _data["projectIds"])
                    this.projectIds!.push(item);
            }
        }
    }

    static override fromJS(data: any): SearchDependencyInstancesWithPaginationQuery {
        data = typeof data === 'object' ? data : {};
        let result = new SearchDependencyInstancesWithPaginationQuery();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.sourceIds)) {
            data["sourceIds"] = [];
            for (let item of this.sourceIds)
                data["sourceIds"].push(item);
        }
        if (Array.isArray(this.repositoryIds)) {
            data["repositoryIds"] = [];
            for (let item of this.repositoryIds)
                data["repositoryIds"].push(item);
        }
        if (Array.isArray(this.projectIds)) {
            data["projectIds"] = [];
            for (let item of this.projectIds)
                data["projectIds"].push(item);
        }
        super.toJSON(data);
        return data;
    }
}

export interface ISearchDependencyInstancesWithPaginationQuery extends IPaginatedRequestOfDependencyInstanceVm {
    sourceIds?: number[] | undefined;
    repositoryIds?: number[] | undefined;
    projectIds?: number[] | undefined;
}

export enum SortOrder {
    Ascending = 0,
    Descending = 1,
}

export class PaginatedFilter implements IPaginatedFilter {
    matchMode?: MatchMode;
    operator?: FilterOperator;
    value?: string;

    constructor(data?: IPaginatedFilter) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.matchMode = _data["matchMode"];
            this.operator = _data["operator"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): PaginatedFilter {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedFilter();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["matchMode"] = this.matchMode;
        data["operator"] = this.operator;
        data["value"] = this.value;
        return data;
    }
}

export interface IPaginatedFilter {
    matchMode?: MatchMode;
    operator?: FilterOperator;
    value?: string;
}

export enum MatchMode {
    StartsWith = 0,
    Contains = 1,
    NotContains = 2,
    EndsWith = 3,
    Equals = 4,
    NotEquals = 5,
}

export enum FilterOperator {
    And = 0,
    Or = 1,
}

export class ProjectsVm implements IProjectsVm {
    projects?: ProjectVm[];

    constructor(data?: IProjectsVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["projects"])) {
                this.projects = [] as any;
                for (let item of _data["projects"])
                    this.projects!.push(ProjectVm.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ProjectsVm {
        data = typeof data === 'object' ? data : {};
        let result = new ProjectsVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.projects)) {
            data["projects"] = [];
            for (let item of this.projects)
                data["projects"].push(item.toJSON());
        }
        return data;
    }
}

export interface IProjectsVm {
    projects?: ProjectVm[];
}

export class ProjectVm implements IProjectVm {
    id?: number;
    name?: string;
    type?: string;
    version?: string;
    dependencyCount?: number;
    repositoryId?: number;
    repositoryName?: string;

    constructor(data?: IProjectVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.type = _data["type"];
            this.version = _data["version"];
            this.dependencyCount = _data["dependencyCount"];
            this.repositoryId = _data["repositoryId"];
            this.repositoryName = _data["repositoryName"];
        }
    }

    static fromJS(data: any): ProjectVm {
        data = typeof data === 'object' ? data : {};
        let result = new ProjectVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["type"] = this.type;
        data["version"] = this.version;
        data["dependencyCount"] = this.dependencyCount;
        data["repositoryId"] = this.repositoryId;
        data["repositoryName"] = this.repositoryName;
        return data;
    }
}

export interface IProjectVm {
    id?: number;
    name?: string;
    type?: string;
    version?: string;
    dependencyCount?: number;
    repositoryId?: number;
    repositoryName?: string;
}

export class ListProjectsQuery implements IListProjectsQuery {

    constructor(data?: IListProjectsQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): ListProjectsQuery {
        data = typeof data === 'object' ? data : {};
        let result = new ListProjectsQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IListProjectsQuery {
}

export class RepositorySummaryVm implements IRepositorySummaryVm {
    id?: number;
    name?: string | undefined;
    remoteUrl?: string | undefined;
    defaultBranchName?: string | undefined;
    parseTime?: Date;

    constructor(data?: IRepositorySummaryVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.remoteUrl = _data["remoteUrl"];
            this.defaultBranchName = _data["defaultBranchName"];
            this.parseTime = _data["parseTime"] ? new Date(_data["parseTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): RepositorySummaryVm {
        data = typeof data === 'object' ? data : {};
        let result = new RepositorySummaryVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["remoteUrl"] = this.remoteUrl;
        data["defaultBranchName"] = this.defaultBranchName;
        data["parseTime"] = this.parseTime ? this.parseTime.toISOString() : <any>undefined;
        return data;
    }
}

export interface IRepositorySummaryVm {
    id?: number;
    name?: string | undefined;
    remoteUrl?: string | undefined;
    defaultBranchName?: string | undefined;
    parseTime?: Date;
}

export class ProblemDetails implements IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    [key: string]: any;

    constructor(data?: IProblemDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.type = _data["type"];
            this.title = _data["title"];
            this.status = _data["status"];
            this.detail = _data["detail"];
            this.instance = _data["instance"];
        }
    }

    static fromJS(data: any): ProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ProblemDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["type"] = this.type;
        data["title"] = this.title;
        data["status"] = this.status;
        data["detail"] = this.detail;
        data["instance"] = this.instance;
        return data;
    }
}

export interface IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    [key: string]: any;
}

export class RepositorySummariesVm implements IRepositorySummariesVm {
    repositorySummaries?: RepositorySummaryVm[];

    constructor(data?: IRepositorySummariesVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["repositorySummaries"])) {
                this.repositorySummaries = [] as any;
                for (let item of _data["repositorySummaries"])
                    this.repositorySummaries!.push(RepositorySummaryVm.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RepositorySummariesVm {
        data = typeof data === 'object' ? data : {};
        let result = new RepositorySummariesVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.repositorySummaries)) {
            data["repositorySummaries"] = [];
            for (let item of this.repositorySummaries)
                data["repositorySummaries"].push(item.toJSON());
        }
        return data;
    }
}

export interface IRepositorySummariesVm {
    repositorySummaries?: RepositorySummaryVm[];
}

export class ListRepositoriesQuery implements IListRepositoriesQuery {

    constructor(data?: IListRepositoriesQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): ListRepositoriesQuery {
        data = typeof data === 'object' ? data : {};
        let result = new ListRepositoriesQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IListRepositoriesQuery {
}

export class SourcesVm implements ISourcesVm {
    sources?: SourceVm[];

    constructor(data?: ISourcesVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["sources"])) {
                this.sources = [] as any;
                for (let item of _data["sources"])
                    this.sources!.push(SourceVm.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SourcesVm {
        data = typeof data === 'object' ? data : {};
        let result = new SourcesVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.sources)) {
            data["sources"] = [];
            for (let item of this.sources)
                data["sources"].push(item.toJSON());
        }
        return data;
    }
}

export interface ISourcesVm {
    sources?: SourceVm[];
}

export class SourceVm implements ISourceVm {
    id?: number;
    name?: string;

    constructor(data?: ISourceVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): SourceVm {
        data = typeof data === 'object' ? data : {};
        let result = new SourceVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }
}

export interface ISourceVm {
    id?: number;
    name?: string;
}

export class ListSourcesQuery implements IListSourcesQuery {

    constructor(data?: IListSourcesQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): ListSourcesQuery {
        data = typeof data === 'object' ? data : {};
        let result = new ListSourcesQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IListSourcesQuery {
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}