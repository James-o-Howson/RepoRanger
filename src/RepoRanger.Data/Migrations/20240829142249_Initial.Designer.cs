// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RepoRanger.Data;

#nullable disable

namespace RepoRanger.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240829142249_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.7");

            modelBuilder.Entity("DependencySourceDependencyVersion", b =>
                {
                    b.Property<Guid>("SourcesId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("VersionsId")
                        .HasColumnType("TEXT");

                    b.HasKey("SourcesId", "VersionsId");

                    b.HasIndex("VersionsId");

                    b.ToTable("DependencySourceDependencyVersion");
                });

            modelBuilder.Entity("RepoRanger.Domain.Dependencies.Dependency", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(true)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(150)
                        .IsUnicode(true)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Dependencies");
                });

            modelBuilder.Entity("RepoRanger.Domain.Dependencies.Entities.DependencySource", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(true)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(150)
                        .IsUnicode(true)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("DependencySources");
                });

            modelBuilder.Entity("RepoRanger.Domain.Dependencies.Entities.DependencyVersion", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(true)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DependencyId")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(150)
                        .IsUnicode(true)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DependencyId");

                    b.ToTable("DependencyVersions");
                });

            modelBuilder.Entity("RepoRanger.Domain.Dependencies.Entities.Vulnerability", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(true)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DependencySourceId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DependencyVersionId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Details")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(150)
                        .IsUnicode(true)
                        .HasColumnType("TEXT");

                    b.Property<string>("OsvId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("Published")
                        .HasColumnType("TEXT");

                    b.Property<int>("State")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Summary")
                        .HasMaxLength(120)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("Withdrawn")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DependencySourceId");

                    b.HasIndex("DependencyVersionId");

                    b.ToTable("Vulnerabilities");
                });

            modelBuilder.Entity("RepoRanger.Domain.PersistedEvents.PersistedEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("Created")
                        .HasMaxLength(150)
                        .IsUnicode(true)
                        .HasColumnType("TEXT");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastErrorDetails")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("ProcessFinishedTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("ProcessStartTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("RetryCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("PersistedEvents");
                });

            modelBuilder.Entity("RepoRanger.Domain.VersionControlSystems.Entities.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(true)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(150)
                        .IsUnicode(true)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RepositoryId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasAlternateKey("RepositoryId", "Name", "Path");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("RepoRanger.Domain.VersionControlSystems.Entities.ProjectDependency", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(true)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DependencyId")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(150)
                        .IsUnicode(true)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("RepositoryId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("VersionControlSystemId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("VersionId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DependencyId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("RepositoryId");

                    b.HasIndex("SourceId");

                    b.HasIndex("VersionControlSystemId");

                    b.HasIndex("VersionId");

                    b.ToTable("ProjectDependencies");
                });

            modelBuilder.Entity("RepoRanger.Domain.VersionControlSystems.Entities.ProjectMetadata", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(true)
                        .HasColumnType("TEXT");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(150)
                        .IsUnicode(true)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectMetadata");
                });

            modelBuilder.Entity("RepoRanger.Domain.VersionControlSystems.Entities.Repository", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(true)
                        .HasColumnType("TEXT");

                    b.Property<string>("DefaultBranch")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(150)
                        .IsUnicode(true)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RemoteUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("VersionControlSystemId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasAlternateKey("VersionControlSystemId", "Name", "RemoteUrl");

                    b.ToTable("Repositories");
                });

            modelBuilder.Entity("RepoRanger.Domain.VersionControlSystems.VersionControlSystem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(true)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(150)
                        .IsUnicode(true)
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("VersionControlSystems");
                });

            modelBuilder.Entity("DependencySourceDependencyVersion", b =>
                {
                    b.HasOne("RepoRanger.Domain.Dependencies.Entities.DependencySource", null)
                        .WithMany()
                        .HasForeignKey("SourcesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RepoRanger.Domain.Dependencies.Entities.DependencyVersion", null)
                        .WithMany()
                        .HasForeignKey("VersionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RepoRanger.Domain.Dependencies.Entities.DependencyVersion", b =>
                {
                    b.HasOne("RepoRanger.Domain.Dependencies.Dependency", "Dependency")
                        .WithMany("Versions")
                        .HasForeignKey("DependencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dependency");
                });

            modelBuilder.Entity("RepoRanger.Domain.Dependencies.Entities.Vulnerability", b =>
                {
                    b.HasOne("RepoRanger.Domain.Dependencies.Entities.DependencySource", "DependencySource")
                        .WithMany()
                        .HasForeignKey("DependencySourceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RepoRanger.Domain.Dependencies.Entities.DependencyVersion", "DependencyVersion")
                        .WithMany("Vulnerabilities")
                        .HasForeignKey("DependencyVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DependencySource");

                    b.Navigation("DependencyVersion");
                });

            modelBuilder.Entity("RepoRanger.Domain.VersionControlSystems.Entities.Project", b =>
                {
                    b.HasOne("RepoRanger.Domain.VersionControlSystems.Entities.Repository", "Repository")
                        .WithMany("Projects")
                        .HasForeignKey("RepositoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("RepoRanger.Domain.VersionControlSystems.ValueObjects.ProjectType", "Type", b1 =>
                        {
                            b1.Property<Guid>("ProjectId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("ProjectId");

                            b1.ToTable("Projects");

                            b1.WithOwner()
                                .HasForeignKey("ProjectId");
                        });

                    b.Navigation("Repository");

                    b.Navigation("Type")
                        .IsRequired();
                });

            modelBuilder.Entity("RepoRanger.Domain.VersionControlSystems.Entities.ProjectDependency", b =>
                {
                    b.HasOne("RepoRanger.Domain.Dependencies.Dependency", "Dependency")
                        .WithMany()
                        .HasForeignKey("DependencyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RepoRanger.Domain.VersionControlSystems.Entities.Project", "Project")
                        .WithMany("ProjectDependencies")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RepoRanger.Domain.VersionControlSystems.Entities.Repository", null)
                        .WithMany("Dependencies")
                        .HasForeignKey("RepositoryId");

                    b.HasOne("RepoRanger.Domain.Dependencies.Entities.DependencySource", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RepoRanger.Domain.VersionControlSystems.VersionControlSystem", null)
                        .WithMany("Dependencies")
                        .HasForeignKey("VersionControlSystemId");

                    b.HasOne("RepoRanger.Domain.Dependencies.Entities.DependencyVersion", "Version")
                        .WithMany()
                        .HasForeignKey("VersionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Dependency");

                    b.Navigation("Project");

                    b.Navigation("Source");

                    b.Navigation("Version");
                });

            modelBuilder.Entity("RepoRanger.Domain.VersionControlSystems.Entities.ProjectMetadata", b =>
                {
                    b.HasOne("RepoRanger.Domain.VersionControlSystems.Entities.Project", null)
                        .WithMany("Metadata")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RepoRanger.Domain.VersionControlSystems.Entities.Repository", b =>
                {
                    b.HasOne("RepoRanger.Domain.VersionControlSystems.VersionControlSystem", "VersionControlSystem")
                        .WithMany("Repositories")
                        .HasForeignKey("VersionControlSystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VersionControlSystem");
                });

            modelBuilder.Entity("RepoRanger.Domain.Dependencies.Dependency", b =>
                {
                    b.Navigation("Versions");
                });

            modelBuilder.Entity("RepoRanger.Domain.Dependencies.Entities.DependencyVersion", b =>
                {
                    b.Navigation("Vulnerabilities");
                });

            modelBuilder.Entity("RepoRanger.Domain.VersionControlSystems.Entities.Project", b =>
                {
                    b.Navigation("Metadata");

                    b.Navigation("ProjectDependencies");
                });

            modelBuilder.Entity("RepoRanger.Domain.VersionControlSystems.Entities.Repository", b =>
                {
                    b.Navigation("Dependencies");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("RepoRanger.Domain.VersionControlSystems.VersionControlSystem", b =>
                {
                    b.Navigation("Dependencies");

                    b.Navigation("Repositories");
                });
#pragma warning restore 612, 618
        }
    }
}
