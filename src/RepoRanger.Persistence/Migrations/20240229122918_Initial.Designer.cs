// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RepoRanger.Persistence;

#nullable disable

namespace RepoRanger.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240229122918_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.1");

            modelBuilder.Entity("RepoRanger.Domain.Entities.Dependency", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("Name");

                    b.ToTable("Dependencies");
                });

            modelBuilder.Entity("RepoRanger.Domain.Entities.DependencyInstance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(true)
                        .HasColumnType("TEXT");

                    b.Property<string>("DependencyName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("RepositoryId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("SourceId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DependencyName");

                    b.HasIndex("ProjectId");

                    b.HasIndex("RepositoryId");

                    b.HasIndex("SourceId");

                    b.ToTable("DependencyInstances");
                });

            modelBuilder.Entity("RepoRanger.Domain.Entities.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(true)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RepositoryId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RepositoryId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("RepoRanger.Domain.Entities.Repository", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(true)
                        .HasColumnType("TEXT");

                    b.Property<string>("DefaultBranch")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DefaultBranchId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RemoteUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SourceId");

                    b.ToTable("Repositories");
                });

            modelBuilder.Entity("RepoRanger.Domain.Entities.Source", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(true)
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Sources");
                });

            modelBuilder.Entity("RepoRanger.Domain.Entities.DependencyInstance", b =>
                {
                    b.HasOne("RepoRanger.Domain.Entities.Dependency", null)
                        .WithMany("DependencyInstances")
                        .HasForeignKey("DependencyName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RepoRanger.Domain.Entities.Project", "Project")
                        .WithMany("DependencyInstances")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RepoRanger.Domain.Entities.Repository", null)
                        .WithMany("DependencyInstances")
                        .HasForeignKey("RepositoryId");

                    b.HasOne("RepoRanger.Domain.Entities.Source", null)
                        .WithMany("DependencyInstances")
                        .HasForeignKey("SourceId");

                    b.OwnsOne("RepoRanger.Domain.ValueObjects.DependencySource", "Source", b1 =>
                        {
                            b1.Property<Guid>("DependencyInstanceId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("DependencyInstanceId");

                            b1.ToTable("DependencyInstances");

                            b1.WithOwner()
                                .HasForeignKey("DependencyInstanceId");
                        });

                    b.Navigation("Project");

                    b.Navigation("Source")
                        .IsRequired();
                });

            modelBuilder.Entity("RepoRanger.Domain.Entities.Project", b =>
                {
                    b.HasOne("RepoRanger.Domain.Entities.Repository", "Repository")
                        .WithMany("Projects")
                        .HasForeignKey("RepositoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("RepoRanger.Domain.ValueObjects.ProjectType", "Type", b1 =>
                        {
                            b1.Property<Guid>("ProjectId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("ProjectId");

                            b1.ToTable("Projects");

                            b1.WithOwner()
                                .HasForeignKey("ProjectId");
                        });

                    b.OwnsOne("System.Collections.Generic.List<RepoRanger.Domain.ValueObjects.Metadata>", "Metadata", b1 =>
                        {
                            b1.Property<Guid>("ProjectId")
                                .HasColumnType("TEXT");

                            b1.Property<int>("Capacity")
                                .HasColumnType("INTEGER");

                            b1.HasKey("ProjectId");

                            b1.ToTable("Projects");

                            b1.WithOwner()
                                .HasForeignKey("ProjectId");
                        });

                    b.Navigation("Metadata")
                        .IsRequired();

                    b.Navigation("Repository");

                    b.Navigation("Type")
                        .IsRequired();
                });

            modelBuilder.Entity("RepoRanger.Domain.Entities.Repository", b =>
                {
                    b.HasOne("RepoRanger.Domain.Entities.Source", "Source")
                        .WithMany("Repositories")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Source");
                });

            modelBuilder.Entity("RepoRanger.Domain.Entities.Dependency", b =>
                {
                    b.Navigation("DependencyInstances");
                });

            modelBuilder.Entity("RepoRanger.Domain.Entities.Project", b =>
                {
                    b.Navigation("DependencyInstances");
                });

            modelBuilder.Entity("RepoRanger.Domain.Entities.Repository", b =>
                {
                    b.Navigation("DependencyInstances");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("RepoRanger.Domain.Entities.Source", b =>
                {
                    b.Navigation("DependencyInstances");

                    b.Navigation("Repositories");
                });
#pragma warning restore 612, 618
        }
    }
}
