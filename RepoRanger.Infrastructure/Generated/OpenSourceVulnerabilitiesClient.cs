//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"

namespace ThirdPartyApiClient
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IOpenSourceVulnerabilitiesClient
    {
        /// <summary>
        /// Query vulnerabilities for a particular project at a given commit or
        /// <br/>version.
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1VulnerabilityList> QueryAffectedAsync(V1Query body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query vulnerabilities for a particular project at a given commit or
        /// <br/>version.
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1VulnerabilityList> QueryAffectedAsync(V1Query body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Query vulnerabilities (batched) for given package versions and commits.
        /// <br/>This currently allows a maximum of 1000 package versions to be included in a single query.
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1BatchVulnerabilityList> QueryAffectedBatchAsync(V1BatchQuery body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query vulnerabilities (batched) for given package versions and commits.
        /// <br/>This currently allows a maximum of 1000 package versions to be included in a single query.
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1BatchVulnerabilityList> QueryAffectedBatchAsync(V1BatchQuery body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Return a `Vulnerability` object for a given OSV ID.
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OsvVulnerability> GetVulnByIdAsync(string id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Return a `Vulnerability` object for a given OSV ID.
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OsvVulnerability> GetVulnByIdAsync(string id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Determine the version of the provided hash values.
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1VersionMatchList> DetermineVersionAsync(V1VersionQuery body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Determine the version of the provided hash values.
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1VersionMatchList> DetermineVersionAsync(V1VersionQuery body, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OpenSourceVulnerabilitiesClient : IOpenSourceVulnerabilitiesClient
    {
        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);

        public OpenSourceVulnerabilitiesClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Query vulnerabilities for a particular project at a given commit or
        /// <br/>version.
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<V1VulnerabilityList> QueryAffectedAsync(V1Query body)
        {
            return QueryAffectedAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query vulnerabilities for a particular project at a given commit or
        /// <br/>version.
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<V1VulnerabilityList> QueryAffectedAsync(V1Query body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "v1/query"
                    urlBuilder_.Append("v1/query");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<V1VulnerabilityList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RpcStatus>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RpcStatus>("An unexpected error response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Query vulnerabilities (batched) for given package versions and commits.
        /// <br/>This currently allows a maximum of 1000 package versions to be included in a single query.
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<V1BatchVulnerabilityList> QueryAffectedBatchAsync(V1BatchQuery body)
        {
            return QueryAffectedBatchAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query vulnerabilities (batched) for given package versions and commits.
        /// <br/>This currently allows a maximum of 1000 package versions to be included in a single query.
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<V1BatchVulnerabilityList> QueryAffectedBatchAsync(V1BatchQuery body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "v1/querybatch"
                    urlBuilder_.Append("v1/querybatch");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<V1BatchVulnerabilityList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RpcStatus>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RpcStatus>("An unexpected error response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Return a `Vulnerability` object for a given OSV ID.
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<OsvVulnerability> GetVulnByIdAsync(string id)
        {
            return GetVulnByIdAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Return a `Vulnerability` object for a given OSV ID.
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<OsvVulnerability> GetVulnByIdAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "v1/vulns/{id}"
                    urlBuilder_.Append("v1/vulns/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OsvVulnerability>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RpcStatus>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RpcStatus>("An unexpected error response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Determine the version of the provided hash values.
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<V1VersionMatchList> DetermineVersionAsync(V1VersionQuery body)
        {
            return DetermineVersionAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Determine the version of the provided hash values.
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<V1VersionMatchList> DetermineVersionAsync(V1VersionQuery body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "v1experimental/determineversion"
                    urlBuilder_.Append("v1experimental/determineversion");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<V1VersionMatchList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RpcStatus>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RpcStatus>("An unexpected error response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    /// <summary>
    /// Affected versions and commits.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OsvAffected
    {
        /// <summary>
        /// Required. Package information.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("package")]
        public OsvPackage Package { get; set; }

        /// <summary>
        /// Required. Range information.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("ranges")]
        public System.Collections.Generic.ICollection<OsvRange> Ranges { get; set; }

        /// <summary>
        /// Optional. List of affected versions.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("versions")]
        public System.Collections.Generic.ICollection<string> Versions { get; set; }

        /// <summary>
        /// Optional. JSON object holding additional information about the
        /// <br/>vulnerability as defined by the ecosystem for which the record applies.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("ecosystemSpecific")]
        public object EcosystemSpecific { get; set; }

        /// <summary>
        /// Optional. JSON object holding additional information about the
        /// <br/>vulnerability as defined by the database for which the record applies.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("databaseSpecific")]
        public object DatabaseSpecific { get; set; }

        /// <summary>
        /// Optional. Severity of the vulnerability for this package.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("severity")]
        public System.Collections.Generic.ICollection<OsvSeverity> Severity { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OsvCredit
    {
        /// <summary>
        /// The name to give credit to.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Contact methods (URLs).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("contact")]
        public System.Collections.Generic.ICollection<string> Contact { get; set; }

        /// <summary>
        /// Optional. The type or role of the individual or entity being credited.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public OsvCreditType? Type { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OsvCreditType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNSPECIFIED")]
        UNSPECIFIED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"OTHER")]
        OTHER = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FINDER")]
        FINDER = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"REPORTER")]
        REPORTER = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ANALYST")]
        ANALYST = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"COORDINATOR")]
        COORDINATOR = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"REMEDIATION_DEVELOPER")]
        REMEDIATION_DEVELOPER = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"REMEDIATION_REVIEWER")]
        REMEDIATION_REVIEWER = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"REMEDIATION_VERIFIER")]
        REMEDIATION_VERIFIER = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"TOOL")]
        TOOL = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"SPONSOR")]
        SPONSOR = 10,

    }

    /// <summary>
    /// Version events.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OsvEvent
    {
        /// <summary>
        /// The earliest version/commit where this vulnerability
        /// <br/>was introduced in.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("introduced")]
        public string Introduced { get; set; }

        /// <summary>
        /// The version/commit that this vulnerability was fixed in.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fixed")]
        public string Fixed { get; set; }

        /// <summary>
        /// The limit to apply to the range.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("limit")]
        public string Limit { get; set; }

        /// <summary>
        /// The last affected version.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("lastAffected")]
        public string LastAffected { get; set; }

    }

    /// <summary>
    /// Package information and version.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OsvPackage
    {
        /// <summary>
        /// Required. Name of the package. Should match the name used in the package
        /// <br/>ecosystem (e.g. the npm package name). For C/C++ projects integrated in
        /// <br/>OSS-Fuzz, this is the name used for the integration.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Required. The ecosystem for this package. 
        /// <br/>For the complete list of valid ecosystem names, see
        /// <br/>&lt;https://ossf.github.io/osv-schema/#affectedpackage-field&gt;.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("ecosystem")]
        public string Ecosystem { get; set; }

        /// <summary>
        /// Optional. The package URL for this package.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("purl")]
        public string Purl { get; set; }

    }

    /// <summary>
    /// Affected ranges.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OsvRange
    {
        /// <summary>
        /// Required. The type of version information.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public OsvRangeType? Type { get; set; }

        /// <summary>
        /// Required if type is GIT. The publicly accessible URL of the repo that can
        /// <br/>be directly passed to clone commands.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("repo")]
        public string Repo { get; set; }

        /// <summary>
        /// Required. Version event information.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("events")]
        public System.Collections.Generic.ICollection<OsvEvent> Events { get; set; }

    }

    /// <summary>
    /// Type of the version information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OsvRangeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNSPECIFIED")]
        UNSPECIFIED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"GIT")]
        GIT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"SEMVER")]
        SEMVER = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ECOSYSTEM")]
        ECOSYSTEM = 3,

    }

    /// <summary>
    /// Reference URL.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OsvReference
    {
        /// <summary>
        /// Required. The type of the reference.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public OsvReferenceType? Type { get; set; }

        /// <summary>
        /// Required. The URL.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("url")]
        public string Url { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OsvReferenceType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NONE")]
        NONE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"WEB")]
        WEB = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVISORY")]
        ADVISORY = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"REPORT")]
        REPORT = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FIX")]
        FIX = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"PACKAGE")]
        PACKAGE = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"ARTICLE")]
        ARTICLE = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"EVIDENCE")]
        EVIDENCE = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OsvSeverity
    {
        /// <summary>
        /// The type of this severity entry.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public OsvSeverityType? Type { get; set; }

        /// <summary>
        /// The quantitative score.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("score")]
        public string Score { get; set; }

    }

    /// <summary>
    /// Type of the severity.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OsvSeverityType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNSPECIFIED")]
        UNSPECIFIED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CVSS_V3")]
        CVSS_V3 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CVSS_V2")]
        CVSS_V2 = 2,

    }

    /// <summary>
    /// A vulnerability entry.
    /// <br/>The protobuf representation is *NOT* stable and only used for implementing
    /// <br/>the JSON based API.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OsvVulnerability
    {
        /// <summary>
        /// The OSV schema version.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("schemaVersion")]
        public string SchemaVersion { get; set; }

        /// <summary>
        /// The `id` field is a unique identifier for the vulnerability entry. It is a
        /// <br/>string of the format `&lt;DB&gt;-&lt;ENTRYID&gt;`, where `DB` names the database and
        /// <br/>`ENTRYID` is in the format used by the database. For example:
        /// <br/>“OSV-2020-111”, “CVE-2021-3114”, or “GHSA-vp9c-fpxx-744v”.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// The RFC3339 timestamp indicating when this entry was published.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("published")]
        public System.DateTimeOffset? Published { get; set; }

        /// <summary>
        /// The RFC3339 timestamp indicating when this entry was last modified.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("modified")]
        public System.DateTimeOffset? Modified { get; set; }

        /// <summary>
        /// Optional. The RFC3339 timestamp indicating when this entry is considered to
        /// <br/>be withdrawn.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("withdrawn")]
        public System.DateTimeOffset? Withdrawn { get; set; }

        /// <summary>
        /// Optional. IDs for the same vulnerability in other databases.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("aliases")]
        public System.Collections.Generic.ICollection<string> Aliases { get; set; }

        /// <summary>
        /// Optional. List of IDs of closely related vulnerabilities, such as the same
        /// <br/>problem in alternate ecosystems.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("related")]
        public System.Collections.Generic.ICollection<string> Related { get; set; }

        /// <summary>
        /// Required. One line human readable summary for the vulnerability. It is
        /// <br/>recommended to keep this under 120 characters.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("summary")]
        public string Summary { get; set; }

        /// <summary>
        /// Required. Any additional human readable details for the vulnerability.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("details")]
        public string Details { get; set; }

        /// <summary>
        /// Required. Affected commit ranges and versions.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("affected")]
        public System.Collections.Generic.ICollection<OsvAffected> Affected { get; set; }

        /// <summary>
        /// Optional. URLs to more information/advisories (including the
        /// <br/>scheme e.g "https://").
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("references")]
        public System.Collections.Generic.ICollection<OsvReference> References { get; set; }

        /// <summary>
        /// Optional. JSON object holding additional information about the
        /// <br/>vulnerability as defined by the database for which the record applies.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("databaseSpecific")]
        public object DatabaseSpecific { get; set; }

        /// <summary>
        /// Optional. Severity of the vulnerability.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("severity")]
        public System.Collections.Generic.ICollection<OsvSeverity> Severity { get; set; }

        /// <summary>
        /// Optional. Credits for the vulnerability.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("credits")]
        public System.Collections.Generic.ICollection<OsvCredit> Credits { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProtobufAny
    {

        [System.Text.Json.Serialization.JsonPropertyName("typeUrl")]
        public string TypeUrl { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        public byte[] Value { get; set; }

    }

    /// <summary>
    /// `NullValue` is a singleton enumeration to represent the null value for the
    /// <br/>`Value` type union.
    /// <br/>
    /// <br/> The JSON representation for `NullValue` is JSON `null`.
    /// <br/>
    /// <br/> - NULL_VALUE: Null value.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ProtobufNullValue
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NULL_VALUE")]
        NULL_VALUE = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RpcStatus
    {

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public int? Code { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string Message { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("details")]
        public System.Collections.Generic.ICollection<ProtobufAny> Details { get; set; }

    }

    /// <summary>
    /// Batch query format.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class V1BatchQuery
    {
        /// <summary>
        /// The queries that form this batch query.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("queries")]
        public System.Collections.Generic.ICollection<V1Query> Queries { get; set; }

    }

    /// <summary>
    /// Batched lists of Vulnerability entries.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class V1BatchVulnerabilityList
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.ICollection<V1VulnerabilityList> Results { get; set; }

    }

    /// <summary>
    /// Information about the files in the repository
    /// <br/>to identify the version.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class V1FileHash
    {
        /// <summary>
        /// The file path inside the repository, relative to the repository root.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("filePath")]
        public string FilePath { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("hashType")]
        public string HashType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("hash")]
        public byte[] Hash { get; set; }

    }

    /// <summary>
    /// Query format.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class V1Query
    {
        /// <summary>
        /// The commit hash to query for. If specified, `version` should not be set.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("commit")]
        public string Commit { get; set; }

        /// <summary>
        /// The version string to query for. A fuzzy match is done against upstream
        /// <br/>versions. If specified, `commit` should not be set.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public string Version { get; set; }

        /// <summary>
        /// The package to query against. When a `commit` hash is given, this is
        /// <br/>optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("package")]
        public OsvPackage Package { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("pageToken")]
        public string PageToken { get; set; }

    }

    /// <summary>
    /// Match information for the provided VersionQuery.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class V1VersionMatch
    {
        /// <summary>
        /// Score in the interval (0.0, 1.0] with 1.0 being a perfect match.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("score")]
        public double? Score { get; set; }

        /// <summary>
        /// Information about the upstream repository.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("repoInfo")]
        public V1VersionRepositoryInformation RepoInfo { get; set; }

        /// <summary>
        /// The OSV identifier.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("osvIdentifier")]
        public OsvPackage OsvIdentifier { get; set; }

        /// <summary>
        /// CPE 2.3.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("cpe23")]
        public string Cpe23 { get; set; }

    }

    /// <summary>
    /// Result of DetmineVersion.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class V1VersionMatchList
    {

        [System.Text.Json.Serialization.JsonPropertyName("matches")]
        public System.Collections.Generic.ICollection<V1VersionMatch> Matches { get; set; }

    }

    /// <summary>
    /// The version query.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class V1VersionQuery
    {
        /// <summary>
        /// The name of the dependency. Can be empty.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("fileHashes")]
        public System.Collections.Generic.ICollection<V1FileHash> FileHashes { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class V1VersionRepositoryInformation
    {

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public V1VersionRepositoryInformationRepoType? Type { get; set; }

        /// <summary>
        /// Source address of the repository.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        public string Address { get; set; }

        /// <summary>
        /// Commit hash.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("commit")]
        public byte[] Commit { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("tag")]
        public string Tag { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public string Version { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum V1VersionRepositoryInformationRepoType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNSPECIFIED")]
        UNSPECIFIED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"GIT")]
        GIT = 1,

    }

    /// <summary>
    /// A list of Vulnerability entries.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class V1VulnerabilityList
    {

        [System.Text.Json.Serialization.JsonPropertyName("vulns")]
        public System.Collections.Generic.ICollection<OsvVulnerability> Vulns { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("nextPageToken")]
        public string NextPageToken { get; set; }

    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625